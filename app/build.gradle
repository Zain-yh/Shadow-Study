plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.young.karstlauncher'
    compileSdk 32

    defaultConfig {
        applicationId "com.young.karstlauncher"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/manager/debug/')
            assets.srcDir('build/generated/assets/pluginview/debug/')
            assets.srcDir('build/generated/assets/plugin1-zip/debug/')
            assets.srcDir('build/generated/assets/plugin2-zip/debug/')
        }
        release {
            assets.srcDir('build/generated/assets/manager/release/')
            assets.srcDir('build/generated/assets/pluginview/release/')
            assets.srcDir('build/generated/assets/plugin1-zip/release/')
            assets.srcDir('build/generated/assets/plugin2-zip/release/')
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'


    implementation "display.interactive.htools.shadow.core:common:${shadow_version}"
    implementation "display.interactive.htools.shadow.dynamic:host:${shadow_version}"
    implementation "display.interactive.htools.shadow.dynamic:host-multi-loader-ext:${shadow_version}"

    implementation "commons-io:commons-io:2.5"//sample-host从assets中复制插件用的

    implementation project(':base')
}


def createCopyTask(projectName, buildType, name, apkName, inputFile, taskName) {
    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${buildType}/${apkName}")
    outputFile.getParentFile().mkdirs()
    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn("${projectName}:${taskName}")
}

def generateAssets(generateAssetsTask, buildType) {

    def moduleName = 'manager'
    def pluginManagerApkFile = file(
            "${project(":manager").getBuildDir()}" +
                    "/outputs/apk/${buildType}/" +
                    "${moduleName}-${buildType}.apk"
    )
    //TODO 将 manager apk放到host的 build/generated/assets/sample-manager目录下
    generateAssetsTask.dependsOn createCopyTask(
            ':manager',
            buildType,
            moduleName,
            'pluginmanager.apk',
            pluginManagerApkFile,
            "assemble${buildType.capitalize()}"
    )
    def pluginViewName = 'pluginview'
    def pluginViewApkFile = file(
            "${project(":pluginview").getBuildDir()}" +
                    "/outputs/apk/${buildType}/" +
                    "${pluginViewName}-${buildType}.apk"
    )
    generateAssetsTask.dependsOn createCopyTask(
            ':pluginview',
            buildType,
            pluginViewName,
            'pluginview.apk',
            pluginViewApkFile,
            "assemble${buildType.capitalize()}"
    )


    def pluginZip = file("${getRootProject().getBuildDir()}/plugin-${buildType}-1.zip")
    generateAssetsTask.dependsOn createCopyTask(
            ':plugin1', //拷贝zip文件需要等plugin1 gradle执行完成
            buildType,
            'plugin1-zip',
            "plugin1-${buildType}.zip",
            pluginZip,
            "package${buildType.capitalize()}Plugin"
    )

    def pluginZip2 = file("${getRootProject().getBuildDir()}/plugin-${buildType}-2.zip")
    generateAssetsTask.dependsOn createCopyTask(
            ':plugin2',
            buildType,
            'plugin2-zip',
            "plugin2-${buildType}.zip",
            pluginZip2,
            "package${buildType.capitalize()}Plugin"
    )


}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        generateAssets(task, 'debug')
    }
    if (task.name == "generateReleaseAssets") {
        generateAssets(task, 'release')
    }
}